name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        type: boolean
        default: false
      force_deploy:
        description: 'Force deployment (bypass checks)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      has-code-changes: ${{ steps.changes.outputs.code }}
      has-config-changes: ${{ steps.changes.outputs.config }}
      has-schema-changes: ${{ steps.changes.outputs.schema }}
      deploy-environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            code:
              - 'server/**/*.ts'
              - 'app/**/*.vue'
              - 'pages/**/*.vue'
              - 'components/**/*.vue'
              - 'composables/**/*.ts'
              - 'stores/**/*.ts'
              - 'nuxt.config.ts'
              - 'package.json'
              - 'pnpm-lock.yaml'
            config:
              - 'wrangler.toml'
              - '.github/workflows/**'
              - 'scripts/**/*.sh'
            schema:
              - 'server/database/schema.ts'
              - 'drizzle.config.ts'
              - 'drizzle/**/*.sql'

      - name: Determine deployment environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.has-code-changes == 'true' &&
      (github.event.inputs.skip_tests != 'true' || github.event.inputs.skip_tests == '')
    strategy:
      matrix:
        node-version: ['18', '20']
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm run typecheck

      - name: Run linting
        run: |
          if grep -q '"lint"' package.json; then
            pnpm run lint
          else
            echo "Linting not configured, skipping..."
          fi

      - name: Run unit tests
        run: |
          if grep -q '"test:unit"' package.json; then
            pnpm run test:unit
          else
            echo "Unit tests not configured, skipping..."
          fi

      - name: Build application
        run: pnpm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-code-changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  deploy:
    name: Deploy (${{ needs.detect-changes.outputs.deploy-environment }})
    runs-on: ubuntu-latest
    needs: [detect-changes, test, security-scan]
    if: |
      always() &&
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped') &&
      (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch' ||
        github.event.inputs.force_deploy == 'true'
      )
    environment:
      name: ${{ needs.detect-changes.outputs.deploy-environment }}
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '3.84.0'
          packageManager: pnpm

      - name: Deploy database schema (if changed)
        if: needs.detect-changes.outputs.has-schema-changes == 'true'
        run: |
          echo "Deploying database schema changes..."
          # Run database migrations
          if [ "${{ needs.detect-changes.outputs.deploy-environment }}" = "production" ]; then
            pnpm run db:push:prod
          else
            pnpm run db:push
          fi
        env:
          TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}

      - name: Deploy to Cloudflare Workers
        id: deploy
        run: |
          ENV="${{ needs.detect-changes.outputs.deploy-environment }}"
          
          if [ "$ENV" = "production" ]; then
            wrangler deploy --env production
            echo "deployment-url=https://pingtopass.com" >> $GITHUB_OUTPUT
          elif [ "$ENV" = "staging" ]; then
            wrangler deploy --env staging
            echo "deployment-url=https://staging.pingtopass.com" >> $GITHUB_OUTPUT
          elif [ "$ENV" = "development" ]; then
            wrangler deploy --env development
            echo "deployment-url=https://dev.pingtopass.com" >> $GITHUB_OUTPUT
          else
            # Preview deployment with unique URL
            BRANCH_NAME=$(echo "${{ github.head_ref || github.ref_name }}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            wrangler deploy --env preview --name "pingtopass-preview-$BRANCH_NAME"
            echo "deployment-url=https://$BRANCH_NAME.preview.pingtopass.com" >> $GITHUB_OUTPUT
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Run health check
        run: |
          echo "Running health check for ${{ steps.deploy.outputs.deployment-url }}"
          ./scripts/health-check.sh wait "${{ steps.deploy.outputs.deployment-url }}"
        timeout-minutes: 5

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment successful to ${{ needs.detect-changes.outputs.deploy-environment }}"
            echo "🌐 URL: ${{ steps.deploy.outputs.deployment-url }}"
          else
            echo "❌ Deployment failed"
            exit 1
          fi

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [detect-changes, test, security-scan, deploy]
    if: always()
    steps:
      - name: Determine notification message
        id: message
        run: |
          ENV="${{ needs.detect-changes.outputs.deploy-environment }}"
          DEPLOY_STATUS="${{ needs.deploy.result }}"
          TEST_STATUS="${{ needs.test.result }}"
          
          if [ "$DEPLOY_STATUS" = "success" ]; then
            MESSAGE="✅ **Deployment Successful** to \`$ENV\`"
          elif [ "$DEPLOY_STATUS" = "failure" ]; then
            MESSAGE="❌ **Deployment Failed** to \`$ENV\`"
          elif [ "$TEST_STATUS" = "failure" ]; then
            MESSAGE="❌ **Tests Failed** - Deployment skipped"
          else
            MESSAGE="ℹ️ **No deployment** - No code changes detected"
          fi
          
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `${{ steps.message.outputs.message }}
            
            **Environment:** \`${{ needs.detect-changes.outputs.deploy-environment }}\`
            **Commit:** \`${{ github.sha }}\`
            **Actor:** @${{ github.actor }}
            
            ---
            <details>
            <summary>Job Results</summary>
            
            - **Tests:** ${{ needs.test.result || 'skipped' }}
            - **Security Scan:** ${{ needs.security-scan.result || 'skipped' }}
            - **Deploy:** ${{ needs.deploy.result || 'skipped' }}
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });