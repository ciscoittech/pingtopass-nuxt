name: Security Scanning

on:
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM UTC
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        id: npm-audit
        run: |
          pnpm audit --json > audit-results.json || true
          cat audit-results.json
          
          # Check for high or critical vulnerabilities
          HIGH_VULNS=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
          CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
          
          echo "high-vulnerabilities=$HIGH_VULNS" >> $GITHUB_OUTPUT
          echo "critical-vulnerabilities=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
          
          if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
            echo "security-issues=true" >> $GITHUB_OUTPUT
          else
            echo "security-issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: audit-results.json
          retention-days: 30

      - name: Run Snyk security scan
        if: github.actor != 'dependabot[bot]'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-results.json
        continue-on-error: true

      - name: Upload Snyk results
        if: github.actor != 'dependabot[bot]'
        uses: actions/upload-artifact@v4
        with:
          name: snyk-security-results
          path: snyk-results.json
          retention-days: 30

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json --output=trufflehog-results.json

      - name: Process TruffleHog results
        id: trufflehog
        run: |
          if [ -f trufflehog-results.json ]; then
            SECRETS_COUNT=$(jq '. | length' trufflehog-results.json 2>/dev/null || echo "0")
            echo "secrets-found=$SECRETS_COUNT" >> $GITHUB_OUTPUT
            
            if [ "$SECRETS_COUNT" -gt 0 ]; then
              echo "security-issues=true" >> $GITHUB_OUTPUT
              echo "Found $SECRETS_COUNT potential secrets"
            else
              echo "security-issues=false" >> $GITHUB_OUTPUT
              echo "No secrets found"
            fi
          else
            echo "secrets-found=0" >> $GITHUB_OUTPUT
            echo "security-issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload secret scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: trufflehog-results.json
          retention-days: 30

  code-scan:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for analysis
        run: pnpm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  dockerfile-scan:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile*') != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint on Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif
          skip_check: CKV_GHA_7 # Skip unpinned Actions versions

      - name: Upload Checkov results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          npx license-checker \
            --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0;Unlicense' \
            --excludePrivatePackages \
            --json > license-report.json || true
          
          # Generate human-readable report
          npx license-checker \
            --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0;Unlicense' \
            --excludePrivatePackages > license-report.txt || true

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            license-report.json
            license-report.txt
          retention-days: 90

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, code-scan, infrastructure-scan, license-scan]
    if: always()
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts/

      - name: Generate security report
        id: report
        run: |
          echo "# 🛡️ Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> security-report.md
          echo "**Commit:** \`${{ github.sha }}\`" >> security-report.md
          echo "**Branch:** \`${{ github.ref_name }}\`" >> security-report.md
          echo "" >> security-report.md
          
          # Dependency Scan Results
          echo "## 📦 Dependency Vulnerabilities" >> security-report.md
          DEPS_STATUS="${{ needs.dependency-scan.result }}"
          if [ "$DEPS_STATUS" = "success" ]; then
            echo "✅ **Status:** No critical vulnerabilities found" >> security-report.md
          else
            echo "⚠️ **Status:** Issues detected - review required" >> security-report.md
          fi
          echo "" >> security-report.md
          
          # Secret Scan Results
          echo "## 🔐 Secret Scanning" >> security-report.md
          SECRETS_STATUS="${{ needs.secret-scan.result }}"
          if [ "$SECRETS_STATUS" = "success" ]; then
            echo "✅ **Status:** No secrets detected" >> security-report.md
          else
            echo "❌ **Status:** Potential secrets found - immediate review required" >> security-report.md
          fi
          echo "" >> security-report.md
          
          # Code Analysis Results
          echo "## 🔍 Static Code Analysis" >> security-report.md
          CODE_STATUS="${{ needs.code-scan.result }}"
          if [ "$CODE_STATUS" = "success" ]; then
            echo "✅ **Status:** No security issues detected" >> security-report.md
          else
            echo "⚠️ **Status:** Issues detected - review security tab" >> security-report.md
          fi
          echo "" >> security-report.md
          
          # Infrastructure Scan Results
          echo "## 🏗️ Infrastructure Security" >> security-report.md
          INFRA_STATUS="${{ needs.infrastructure-scan.result }}"
          if [ "$INFRA_STATUS" = "success" ]; then
            echo "✅ **Status:** Configuration looks secure" >> security-report.md
          else
            echo "⚠️ **Status:** Configuration issues found" >> security-report.md
          fi
          echo "" >> security-report.md
          
          # License Compliance
          echo "## 📄 License Compliance" >> security-report.md
          LICENSE_STATUS="${{ needs.license-scan.result }}"
          if [ "$LICENSE_STATUS" = "success" ]; then
            echo "✅ **Status:** All dependencies use approved licenses" >> security-report.md
          else
            echo "⚠️ **Status:** License compliance issues detected" >> security-report.md
          fi
          echo "" >> security-report.md
          
          # Overall Status
          if [ "$DEPS_STATUS" = "success" ] && [ "$SECRETS_STATUS" = "success" ] && [ "$CODE_STATUS" = "success" ] && [ "$INFRA_STATUS" = "success" ] && [ "$LICENSE_STATUS" = "success" ]; then
            OVERALL_STATUS="✅ PASSED"
            echo "overall-status=success" >> $GITHUB_OUTPUT
          else
            OVERALL_STATUS="⚠️ ISSUES FOUND"
            echo "overall-status=failure" >> $GITHUB_OUTPUT
          fi
          
          echo "## 📊 Overall Security Status: $OVERALL_STATUS" >> security-report.md
          echo "" >> security-report.md
          echo "---" >> security-report.md
          echo "*Report generated automatically by GitHub Actions*" >> security-report.md
          
          # Output report content
          REPORT_CONTENT=$(cat security-report.md)
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo "$REPORT_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create security issue
        if: |
          steps.report.outputs.overall-status == 'failure' && 
          github.event_name == 'schedule' &&
          github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.report.outputs.report }}`;
            
            const title = `🛡️ Security Scan Issues Detected - ${new Date().toISOString().split('T')[0]}`;
            
            const body = `${report}
            
            ## 🔧 Action Required
            
            Please review the security scan results and address any issues found:
            
            1. Check the [Security tab](${context.payload.repository.html_url}/security) for detailed findings
            2. Review uploaded artifacts in the [Actions tab](${context.payload.repository.html_url}/actions)
            3. Update dependencies and fix configuration issues
            4. Re-run security scans after fixes
            
            ## 📎 Artifacts
            
            Check the workflow run for detailed reports:
            - Dependency audit results
            - Secret scan findings
            - Code analysis reports
            - License compliance details
            
            ---
            *This issue was created automatically by the security scanning workflow*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated']
            });

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 90